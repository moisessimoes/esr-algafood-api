spring.datasource.username=root
spring.datasource.password=devMs#47

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect

#server.port=9090

### ESPECIFICANDO OS LOCAIS PARA O FLYWAY EXECUTAR ARQUIVOS
spring.flyway.locations=classpath:db/migration,classpath:db/testdata

### Mudando o tipo de storage, que pode ser local ou s3
#algafood.storage.tipo=s3


##### STORAGE
### ESPECIFICANDO DIRETORIO NO DISCO LOCAL PARA SALVAR FOTOS
algafood.storage.local.diretorio-fotos=D:\\Imagens\\Algafood testes

##### EMAIL
### CONFIGURACAO PARA ENVIO DE EMAILS (Estou usando o SendGrid para enviar os emails)
spring.mail.host=smtp.sendgrid.net
spring.mail.port=587
spring.mail.username=apikey
algafood.email.remetente=AlgaFood <>
#spring.mail.password=A chave esta no OpenConfig do Boot Dashboard
algafood.email.impl=fake
#Email Sandbox
algafood.email.sandbox.destinatario=s


######################################################################
### 22.2. Adicionando segurança na API com Spring Security
spring.security.user.name=algafood
spring.security.user.password=123456

######################################################################
#23.12. Configurando a validação de JWT no Resource Server com a chave pública
# Na aula ele usa o arquivo de chave publica gerado com opessl, mas eu nao tenho o openssl instalado
#por isso, voui tentar usar o proprio endpoint para acessar
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/oauth/token_key

###23.45. Implementando o endpoint do JSON Web Key Set (JWKS)
#spring.security.oauth2.resourceserver.jwt.public-key-location=classpath:keys/algafood-pkey.pem
#23.41. Juntando o Resource Server com o Authorization Server no mesmo projeto
#23.46. Externalizando o KeyStore: criando um ProtocolResolver para Base64
#algafood.jwt.keystore.jks-location=classpath:keys/algafood.jks
algafood.jwt.keystore.jks-location=base64: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
algafood.jwt.keystore.password=123456
algafood.jwt.keystore.keypair-alias=algafood

######################################################################
#Para viaualizar logs de DEBUG do Spring no console, basta habilitar dessa forma
#logging.level.org.springframework=DEBUG
######################################################################
### 22.11. Configurando o Resource Server com a nova stack do Spring Security
#spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://localhost:8080/oauth/check_token
#spring.security.oauth2.resourceserver.opaquetoken.client-id=checktoken
#spring.security.oauth2.resourceserver.opaquetoken.client-secret=check123


######################################################################
#Alterando o padrao de nomeclatura dos campos no json (se quiser)
#spring.jackson.property-naming-strategy=SNAKE_CASE

#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create

### Criando migracao a partir de DDL gerado por schema generation ###
#Apos a execucao dessas duas linhas abaixo, comente elas
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql
###


### CONFIGURANDO A QUANTIDADE DO POOL DE CONEXOES DO HIKARI - POR PADRAO SAO 10 CONEXOES

# Setando o maximo de conexoes, ou seja, o maximo de conexoes que podera ser feita sao 5
#spring.datasource.hikari.maximum-pool-size=5


# Setando o minimo de conexoes, ou seja, vai comecar com 3 e se for necessario, pode chegar ate 5 conexoes
#spring.datasource.hikari.minimum-idle=3


# Se o minimo de conexoes nao for especificado, o valor minimo vai ser igual ao maximo, ou seja, seria 5 conexoes para cada o max e o min nesse caso.

###
# Setando o tempo limite em que o Hikari vai ficar mantendo as duas conexoes ociosas, pois o minimo de conexoes sao 3 e o maximo 5
#spring.datasource.hikari.idle-timeout=10000


### DEFININDO TAMANHO MAXIMO DO ARQUIVO QUE PODE SER ENVIADO
#spring.servlet.multipart.max-file-size=2MB

# CASO SEJA NECESSARIO, TAMBEM PODE-SE ALTERAR O TAMANHO DA REQUISICAO
#spring.servlet.multipart.max-request-size=20MB