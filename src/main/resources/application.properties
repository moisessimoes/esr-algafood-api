spring.datasource.url=jdbc:mysql://localhost/algafood?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=devMs#47

#Habilitando o erro do jackson caso o json seja enviado com campos desconhecidos
spring.jackson.deserialization.fail-on-unknown-properties=true

#Habilitando o erro do jackson caso o json seja enviado com campos existentes mas que estejam anotados com JsonIgnore
spring.jackson.deserialization.fail-on-ignored-properties=true

#Habilitando o erro de acesso a uma URL que nao foi mapeada
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect

### ESPECIFICANDO OS LOCAIS PARA O FLYWAY EXECUTAR ARQUIVOS
spring.flyway.locations=classpath:db/migration,classpath:db/testdata

### ESPECIFICANDO DIRETORIO NO DISCO LOCAL PARA SALVAR FOTOS
algafood.storage.local.diretorio-fotos=D:\\Imagens\\Algafood testes

### COMO NAO TENHO CONTA NA AMAZON S3, VOU APENAS DEIXAR REGISTRADO A FORMA DE CONFIGURAR
algafood.storage.s3.id-chave-acesso=Chave de acesso que e obtida quando a conta da AWS e criada
algafood.storage.s3.id-chave-secreta=Chave de acesso secreta que e obtida quando a conta da AWS e criada
algafood.storage.s3.bucket=Nome do bucket que e obtido quando a conta da AWS e criada
algafood.storage.s3.regiao=Codigo da regiao que e obtido quando a conta da AWS e criada
algafood.storage.s3.diretorio-fotos=Nome da pasta na AWS onde as fotos vao ser salvas


#Alterando o padrao de nomeclatura dos campos no json (se quiser)
#spring.jackson.property-naming-strategy=SNAKE_CASE

#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create

### Criando migracao a partir de DDL gerado por schema generation ###
#Apos a execucao dessas duas linhas abaixo, comente elas
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql
###


### CONFIGURANDO A QUANTIDADE DO POOL DE CONEXOES DO HIKARI - POR PADRAO SAO 10 CONEXOES

# Setando o maximo de conexoes, ou seja, o maximo de conexoes que podera ser feita sao 5
#spring.datasource.hikari.maximum-pool-size=5


# Setando o minimo de conexoes, ou seja, vai comecar com 3 e se for necessario, pode chegar ate 5 conexoes
#spring.datasource.hikari.minimum-idle=3


# Se o minimo de conexoes nao for especificado, o valor minimo vai ser igual ao maximo, ou seja, seria 5 conexoes para cada o max e o min nesse caso.

###
# Setando o tempo limite em que o Hikari vai ficar mantendo as duas conexoes ociosas, pois o minimo de conexoes sao 3 e o maximo 5
#spring.datasource.hikari.idle-timeout=10000


### DEFININDO TAMANHO MAXIMO DO ARQUIVO QUE PODE SER ENVIADO
#spring.servlet.multipart.max-file-size=2MB

# CASO SEJA NECESSARIO, TAMBEM PODE-SE ALTERAR O TAMANHO DA REQUISICAO
#spring.servlet.multipart.max-request-size=20MB